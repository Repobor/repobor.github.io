import{_ as t,c as n,a as s,b as a,t as i,d as e,o as r}from"./app.625f3316.js";const m="/assets/1.1_进制转换例子.ae70b891.jpg",p="/assets/1.2_进制转换例子.ce00678f.jpg",c="/assets/1.3_逻辑运算.2228e701.png",d="/assets/1.4_计算机结构.3049ddb4.png",h="/assets/1.5_寻址方式.b813cc7b.png",o="/assets/1.6_流水线的计算.ea5ed520.png",u="/assets/1.7_存储体系结构.48e505f7.png",_="/assets/1.8_主存储器的基础_组成示意.9bf6d83d.png",g="/assets/1.9_磁盘对比.e580a04e.png",b="/assets/2.1_计算机软件.9abbe3a8.png",f="/assets/2.2_进程的状态.9ca6820b.png",x="/assets/2.3_银行家算法例子.7dc64fb5.png",$=JSON.parse('{"title":"计算机硬件基础","description":"","frontmatter":{"title":"计算机硬件基础"},"headers":[{"level":2,"title":"数据的表示方法","slug":"数据的表示方法","link":"#数据的表示方法","children":[{"level":3,"title":"R进制的表示（R可为二、八、十、十六）","slug":"r进制的表示-r可为二、八、十、十六","link":"#r进制的表示-r可为二、八、十、十六","children":[]},{"level":3,"title":"计算机中的原码、反码和补码","slug":"计算机中的原码、反码和补码","link":"#计算机中的原码、反码和补码","children":[]}]},{"level":2,"title":"逻辑运算","slug":"逻辑运算","link":"#逻辑运算","children":[{"level":3,"title":"计算机系统的组成与体系结构","slug":"计算机系统的组成与体系结构","link":"#计算机系统的组成与体系结构","children":[]}]},{"level":2,"title":"计算机的结构","slug":"计算机的结构","link":"#计算机的结构","children":[]},{"level":2,"title":"指令系统的基础—寻址方式（寻找操作数）","slug":"指令系统的基础—寻址方式-寻找操作数","link":"#指令系统的基础—寻址方式-寻找操作数","children":[]},{"level":2,"title":"CISC与RISC","slug":"cisc与risc","link":"#cisc与risc","children":[]},{"level":2,"title":"流水线","slug":"流水线","link":"#流水线","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[{"level":3,"title":"存储系统","slug":"存储系统","link":"#存储系统","children":[]}]},{"level":2,"title":"存储系统结构","slug":"存储系统结构","link":"#存储系统结构","children":[]},{"level":2,"title":"存储系统的存取方式","slug":"存储系统的存取方式","link":"#存储系统的存取方式","children":[]},{"level":2,"title":"主存储器基础—组成","slug":"主存储器基础—组成","link":"#主存储器基础—组成","children":[]},{"level":2,"title":"Cache","slug":"cache","link":"#cache","children":[]},{"level":2,"title":"磁盘","slug":"磁盘","link":"#磁盘","children":[]},{"level":2,"title":"RAID 技术","slug":"raid-技术","link":"#raid-技术","children":[]},{"level":2,"title":"RAID 2.0优势","slug":"raid-2-0优势","link":"#raid-2-0优势","children":[{"level":3,"title":"系统的可靠性","slug":"系统的可靠性","link":"#系统的可靠性","children":[]}]},{"level":2,"title":"串联系统","slug":"串联系统","link":"#串联系统","children":[]},{"level":2,"title":"并联系统","slug":"并联系统","link":"#并联系统","children":[{"level":3,"title":"操作系统","slug":"操作系统","link":"#操作系统","children":[]}]},{"level":2,"title":"操作系统概述","slug":"操作系统概述","link":"#操作系统概述","children":[]},{"level":2,"title":"进程管理","slug":"进程管理","link":"#进程管理","children":[{"level":3,"title":"进程的状态","slug":"进程的状态","link":"#进程的状态","children":[]},{"level":3,"title":"死锁问题","slug":"死锁问题","link":"#死锁问题","children":[]},{"level":3,"title":"银行家算法—分配资源的原则","slug":"银行家算法—分配资源的原则","link":"#银行家算法—分配资源的原则","children":[]},{"level":3,"title":"进程的互斥和同步","slug":"进程的互斥和同步","link":"#进程的互斥和同步","children":[]},{"level":3,"title":"PV操作-用来解决互斥和同步的问题","slug":"pv操作-用来解决互斥和同步的问题","link":"#pv操作-用来解决互斥和同步的问题","children":[]}]},{"level":2,"title":"存储管理","slug":"存储管理","link":"#存储管理","children":[{"level":3,"title":"页式存储","slug":"页式存储","link":"#页式存储","children":[]},{"level":3,"title":"页面置换算法","slug":"页面置换算法","link":"#页面置换算法","children":[]}]},{"level":2,"title":"文件管理—树形目录结构","slug":"文件管理—树形目录结构","link":"#文件管理—树形目录结构","children":[]},{"level":2,"title":"设备管理","slug":"设备管理","link":"#设备管理","children":[]}],"relativePath":"articles/02-运维/网络工程师/01-计算机硬件基础.md","lastUpdated":null}'),y={name:"articles/02-运维/网络工程师/01-计算机硬件基础.md"},z={id:"frontmatter-title",tabindex:"-1"},v=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),k=e('<h2 id="数据的表示方法" tabindex="-1">数据的表示方法 <a class="header-anchor" href="#数据的表示方法" aria-hidden="true">#</a></h2><h3 id="r进制的表示-r可为二、八、十、十六" tabindex="-1">R进制的表示（R可为二、八、十、十六） <a class="header-anchor" href="#r进制的表示-r可为二、八、十、十六" aria-hidden="true">#</a></h3><p><strong>原则：逢R进一</strong></p><p>二进制只有“0”和“1”两个数，常用下标2表示。如(10)<sub>2</sub>。</p><p>十进制常用下标“10”或在数字的后面加上一个英文字母“D”来表示，如(89)<sub>10</sub>或89D。</p><p>八进制常用下标“8”或在数字的后面加上一个英文字母“O”来表示，如(25)<sub>8</sub>或25O。</p><p>十六进制，就是由十进制改变而来，在十进制的基础之上，用A代表10，B代表11，C代表12，D代表13，E代表14，F代表15。</p><p>十六进制常用下标“16”或在数字的后面加上一个英文字母“H”来表示，如(A1B4)<sub>16</sub>或A1B4H</p><p><img src="'+m+'" alt="1.1_进制转换例子"></p><p><img src="'+p+'" alt="1.2_进制转换例子"></p><h3 id="计算机中的原码、反码和补码" tabindex="-1">计算机中的原码、反码和补码 <a class="header-anchor" href="#计算机中的原码、反码和补码" aria-hidden="true">#</a></h3><table><thead><tr><th></th><th>数值1</th><th>数值-1</th><th>1+(-1)</th></tr></thead><tbody><tr><td>原码</td><td>0 0000001</td><td>1 0000001</td><td>1 0000000</td></tr><tr><td>反码</td><td>0 0000001</td><td>1 1111110</td><td>1 1111111</td></tr><tr><td>补码</td><td>0 0000001</td><td>1 1111111</td><td>0 0000000</td></tr></tbody></table><p>补码在表示负数时，是在原码取反(反码)的基础上+1</p><p>取值范围</p><table><thead><tr><th></th><th>定点整数</th><th>定点小数</th></tr></thead><tbody><tr><td>原码</td><td>-(2<sup>n-1</sup>-1)~2<sup>n-1</sup>-1</td><td>-1&lt;X&lt;1</td></tr><tr><td>反码</td><td>-(2<sup>n-1</sup>-1)~2<sup>n-1</sup>-1</td><td>-1&lt;X&lt;1</td></tr><tr><td>补码</td><td>-(2<sup>n-1</sup>)~2<sup>n-1</sup>-1</td><td>-1≤X&lt;1</td></tr></tbody></table><h2 id="逻辑运算" tabindex="-1">逻辑运算 <a class="header-anchor" href="#逻辑运算" aria-hidden="true">#</a></h2><p><img src="'+c+'" alt="1.3_逻辑运算"></p><h3 id="计算机系统的组成与体系结构" tabindex="-1">计算机系统的组成与体系结构 <a class="header-anchor" href="#计算机系统的组成与体系结构" aria-hidden="true">#</a></h3><h2 id="计算机的结构" tabindex="-1">计算机的结构 <a class="header-anchor" href="#计算机的结构" aria-hidden="true">#</a></h2><img src="'+d+'" alt="1.4_计算机结构" style="zoom:80%;"><h2 id="指令系统的基础—寻址方式-寻找操作数" tabindex="-1">指令系统的基础—寻址方式（寻找操作数） <a class="header-anchor" href="#指令系统的基础—寻址方式-寻找操作数" aria-hidden="true">#</a></h2><p>指令：操作码（加减乘除）+ 地址码（对哪个地址进行操作）（操作数的地址）</p><p>寻址方式：（2，3，4方式的地址都放在主存（内存））</p><ol><li>立即寻址 （速度最快，但是会受到范围的限制，限制大，没有广泛使用）</li><li>变址寻址 （有变址寄存器，基址+偏移）</li><li>直接寻址</li><li>间接寻址（多了一次缓存，访问的是地址的地址）</li><li>寄存器寻址</li><li>寄存器间接寻址</li></ol><p><img src="'+h+'" alt="1.5_寻址方式"></p><h2 id="cisc与risc" tabindex="-1">CISC与RISC <a class="header-anchor" href="#cisc与risc" aria-hidden="true">#</a></h2><table><thead><tr><th>指令系统类型</th><th style="text-align:center;">指令</th><th>寻址方式</th><th>实现方式</th><th>其他</th></tr></thead><tbody><tr><td>CISC（复杂）</td><td style="text-align:center;">数量多，使用频率差别大，可变长格式</td><td>支持多种</td><td>微程序控制技术</td><td></td></tr><tr><td>RISC（精简）</td><td style="text-align:center;">数量少，使用频率接近，定长格式，大部分为单周期指令，操作寄存器，只有Load/Store操作内存</td><td>支持方式少</td><td>增加了通用寄存器；硬布线逻辑控制为主；适合采用流水线</td><td>优化编译，有效支持高级语言</td></tr></tbody></table><h2 id="流水线" tabindex="-1">流水线 <a class="header-anchor" href="#流水线" aria-hidden="true">#</a></h2><p>运行时间的计算</p><h2 id="" tabindex="-1"><img src="'+o+'" alt="1.6_流水线的计算"> <a class="header-anchor" href="#" aria-hidden="true">#</a></h2><p>技术指标的计算</p><p>n：指令系数 Tk：流水线时间</p><p>吞吐率：Tp=n/Tk 上题例子：Tp = 100 / 203</p><p>(理论最大吞吐率：Tp=1/T，周期的倒数，上题例子：Tp=1/2)</p><p>加速比：S=Ts/Tk （Ts:未使用流水线的时间，上题例子：S=500/203）</p><p>效率</p><h3 id="存储系统" tabindex="-1">存储系统 <a class="header-anchor" href="#存储系统" aria-hidden="true">#</a></h3><h2 id="存储系统结构" tabindex="-1">存储系统结构 <a class="header-anchor" href="#存储系统结构" aria-hidden="true">#</a></h2><p><img src="'+u+'" alt="1.7_存储体系结构"></p><h2 id="存储系统的存取方式" tabindex="-1">存储系统的存取方式 <a class="header-anchor" href="#存储系统的存取方式" aria-hidden="true">#</a></h2><ul><li><p>顺序存取（磁带）</p></li><li><p>直接存取（硬盘）</p></li><li><p>随机存取（内存）</p></li><li><p>相连存取（Cache）</p></li></ul><h2 id="主存储器基础—组成" tabindex="-1">主存储器基础—组成 <a class="header-anchor" href="#主存储器基础—组成" aria-hidden="true">#</a></h2><ul><li>实际的存储器总容量，是由一片或多片存储芯片配以控制电路构成的。其容量为 W × B，W是存储单元（word，即字）的数量，B表示每个word由多少 bit（位）组成。 如：某一芯片规格为 w×b，则组成 WxB 的存储器需要（W/w）×（B/b）个芯片。</li></ul><p><img src="'+_+'" alt="1.8_主存储器的基础_组成示意"></p><ul><li><p>主存储器（内存）采用：随机存取方式存储，需对每个存储单元进行编址。而在主存储器中，通常以word为单位进行标识，即每个字一个地址，通常采用16进制表示。</p></li><li><p>例如，按字节编址，地址从A4000H—CBFFFH，则表示有（CBFFF-A4000)+1个字节，即28000H个字节，也就是163840个字节，等于160KB。</p> 计算字节数：CBFFF+1=CC000\\\\ \\ CC000-A4000 = 28000\\\\ 十六进制转二进制：0010 1000 0000 0000 0000\\\\ 因为 2^{10} = 1024 = 1K \\ 所以去掉 10 个 0\\\\ 变成 \\ 10 1000 00\\\\ 二进制转十进制：1×2^7+1×2^5 = 128 + 32 = 160 \\ KB\\\\ <ul><li><p>假设芯片容量 32k × 8 bit</p><p>160k × 8 bit / 32k × 8 bit = 5 块</p></li></ul></li><li><p>表示存储容量相关术语： 位：用bit表示，一个二进制表示1bit 字节：用B表示，1B=8bit 字：实际表示CPU一次处理的二进制的位数，通常为字节的整数倍 对应的字长有：8/16/32/64bit</p></li></ul><h2 id="cache" tabindex="-1">Cache <a class="header-anchor" href="#cache" aria-hidden="true">#</a></h2><p>​ 如果Cache的访问命中率为h，而Cache的访问周期时间是t1，主存储器的访问周期时间是t2，则整个系统的平均访存时间就应该是：命中时间+未命中的时间</p>',47),R=s("p",null,[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"t"),s("mn",null,"3"),s("mo",null,"="),s("mi",null,"h"),s("mo",null,"×"),s("mi",null,"t"),s("mn",null,"1"),s("mo",null,"+"),s("mo",null,"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"h"),s("mo",null,")"),s("mo",null,"×"),s("mi",null,"t"),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"t3 = h \\times t1 + (1 - h) \\times t2 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base displaystyle textstyle uncramped"},[s("span",{class:"mord mathit"},"t"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mrel"},"="),s("span",{class:"mord mathit"},"h"),s("span",{class:"mbin"},"×"),s("span",{class:"mord mathit"},"t"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mbin"},"+"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mbin"},"−"),s("span",{class:"mord mathit"},"h"),s("span",{class:"mclose"},")"),s("span",{class:"mbin"},"×"),s("span",{class:"mord mathit"},"t"),s("span",{class:"mord mathrm"},"2")])])])])],-1),A=e('<ul><li><p>Cache 淘汰算法</p><ul><li><p>先进先出算法</p></li><li><p>最近最少使用算法</p></li><li><p>随机算法</p></li></ul></li></ul><h2 id="磁盘" tabindex="-1">磁盘 <a class="header-anchor" href="#磁盘" aria-hidden="true">#</a></h2><p>​ 磁盘</p><ol><li>SATA</li><li>SCSI</li><li>SAS（串行SCSI）</li><li>SSD</li></ol><p><img src="'+g+'" alt="1.9_磁盘对比.png"></p><h2 id="raid-技术" tabindex="-1">RAID 技术 <a class="header-anchor" href="#raid-技术" aria-hidden="true">#</a></h2><ul><li><p>RAID 0 写入速度块，利用率最高-100%，可靠性最差</p></li><li><p>RAID 1 使用 Disk Mirror （硬盘镜像技术），具备备份和容错能力，效率不高但可靠性高，利用率-50%</p></li><li><p>RAID 3 提供奇偶校验盘，具备数据容错能力，单盘失效时，产生奇偶盘I/O瓶颈效应，硬盘利用率=（n-1）/n</p></li><li><p>RAID 5 采用分布式奇偶校验的数据分段技术，将用于奇偶校验的数据存放在各个硬盘中，具有数据容错能力，可靠性好；有较好的性能，硬盘利用率=（n-1）/n</p></li><li><p>RAID 6 私有级RAID级别标准，全称是“带有两个独立分布式校验方案的独立数据磁盘”；从功能上讲，能实现两个磁盘掉线容错的，都叫RAID6；磁盘利用率（n-2）/n</p></li><li><p>RAID 10 先做RAID1再做RAID0，先镜像再条带化</p></li><li><p>RAID 01 先做RAID0再做RAID1</p></li></ul><h2 id="raid-2-0优势" tabindex="-1">RAID 2.0优势 <a class="header-anchor" href="#raid-2-0优势" aria-hidden="true">#</a></h2><ul><li>快速重构</li><li>自动负载均衡</li><li>系统性能提升</li><li>自愈合</li></ul><h3 id="系统的可靠性" tabindex="-1">系统的可靠性 <a class="header-anchor" href="#系统的可靠性" aria-hidden="true">#</a></h3><h2 id="串联系统" tabindex="-1">串联系统 <a class="header-anchor" href="#串联系统" aria-hidden="true">#</a></h2><p>假设一个系统由n个子系统组成，当且仅当所有的子系统都能正常工作时，系统才能正常工作，这种系统称为串联系统。</p><p><img src="https://img-blog.csdnimg.cn/20190427170138354.png" alt="串联系统"></p>',13),S=s("p",null,[a("设系统各个子系统的可靠性分别用R_1、R_2，...,R_n表示，则系统的可靠性"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"R"),s("mo",null,"="),s("msub",null,[s("mi",null,"R"),s("mn",null,"1")]),s("mo",null,"×"),s("msub",null,[s("mi",null,"R"),s("mn",null,"2")]),s("mo",null,"×"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mo",null,"×"),s("msub",null,[s("mi",null,"R"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"R=R_1\\times R_2\\times...\\times R_n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.68333em"}}),s("span",{class:"strut bottom",style:{height:"0.83333em","vertical-align":"-0.15em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mrel"},"="),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.00773em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathrm"},"1")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mbin"},"×"),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.00773em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathrm"},"2")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mbin"},"×"),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"."),s("span",{class:"mbin"},"×"),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.00773em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"n")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])])])])])],-1),C=s("p",null,[a("如果系统的各个子系统的失效率分别用"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"λ"),s("mn",null,"1")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"λ"),s("mn",null,"2")]),s("mo",{separator:"true"},","),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("msub",null,[s("mi",null,"λ"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"\\lambda_1,\\lambda_2,...\\lambda_n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.69444em"}}),s("span",{class:"strut bottom",style:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord"},[s("span",{class:"mord mathit"},"λ"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathrm"},"1")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"λ"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathrm"},"2")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"λ"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"n")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])])])])]),a("来表示，则系统的失效率为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"λ"),s("mo",null,"="),s("msub",null,[s("mi",null,"λ"),s("mn",null,"1")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"λ"),s("mn",null,"2")]),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("msub",null,[s("mi",null,"λ"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"\\lambda=\\lambda_1+\\lambda_2+...\\lambda_n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.69444em"}}),s("span",{class:"strut bottom",style:{height:"0.84444em","vertical-align":"-0.15em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit"},"λ"),s("span",{class:"mrel"},"="),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"λ"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathrm"},"1")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mbin"},"+"),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"λ"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathrm"},"2")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mbin"},"+"),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"λ"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"n")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])])])])])],-1),I=s("h2",{id:"并联系统",tabindex:"-1"},[a("并联系统 "),s("a",{class:"header-anchor",href:"#并联系统","aria-hidden":"true"},"#")],-1),T=s("p",null,"假如一个系统由n个子系统组成，只要有一个子系统能够正常工作，系统就能正常工作，如下图所示。",-1),D=s("p",null,[s("img",{src:"https://img-blog.csdnimg.cn/20190427170750483.png",alt:"并联系统"})],-1),B=s("p",null,"设系统各个子系统的可靠性分别用R_1、R_2，...,R_n表示，则系统的可靠性",-1),P=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"R"),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"−"),s("mo",null,"("),s("mn",null,"1"),s("mo",null,"−"),s("msub",null,[s("mi",null,"R"),s("mn",null,"1")]),s("mo",null,")"),s("mo",null,"×"),s("mo",null,"("),s("mn",null,"1"),s("mo",null,"−"),s("msub",null,[s("mi",null,"R"),s("mn",null,"2")]),s("mo",null,")"),s("mo",null,"×"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mo",null,"×"),s("mo",null,"("),s("mn",null,"1"),s("mo",null,"−"),s("msub",null,[s("mi",null,"R"),s("mi",null,"n")]),s("mo",null,")")]),s("annotation",{encoding:"application/x-tex"},"R=1-(1-R_1)\\times(1-R_2)\\times...\\times(1-R_n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mrel"},"="),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mbin"},"−"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mbin"},"−"),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.00773em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathrm"},"1")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mclose"},")"),s("span",{class:"mbin"},"×"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mbin"},"−"),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.00773em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathrm"},"2")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mclose"},")"),s("span",{class:"mbin"},"×"),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"."),s("span",{class:"mbin"},"×"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mbin"},"−"),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.00773em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"n")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mclose"},")")])])])],-1),V=e('<h3 id="操作系统" tabindex="-1">操作系统 <a class="header-anchor" href="#操作系统" aria-hidden="true">#</a></h3><h2 id="操作系统概述" tabindex="-1">操作系统概述 <a class="header-anchor" href="#操作系统概述" aria-hidden="true">#</a></h2><p><img src="'+b+'" alt="2.1_计算机软件"></p><h2 id="进程管理" tabindex="-1">进程管理 <a class="header-anchor" href="#进程管理" aria-hidden="true">#</a></h2><h3 id="进程的状态" tabindex="-1">进程的状态 <a class="header-anchor" href="#进程的状态" aria-hidden="true">#</a></h3><p><img src="'+f+'" alt="2.2_进程的状态_三态模型"></p><h3 id="死锁问题" tabindex="-1">死锁问题 <a class="header-anchor" href="#死锁问题" aria-hidden="true">#</a></h3><p>​ 进程管理是操作系统的核心，但如果设计不当，就会出现死锁的问题。一个进程再等待一个不可能发生的事，则进程就死锁了。而如果一个或多个进程产生死锁，就会造成系统死锁。</p><p>​ 死锁产生的四个条件：1.互斥 2.保持和等待 3.不剥夺 4.环路等待</p><p>​ 解决死锁的措施：1.死锁预防 2.死锁避免—银行家算法 3.死锁检测 4.死锁解除</p><h3 id="银行家算法—分配资源的原则" tabindex="-1">银行家算法—分配资源的原则 <a class="header-anchor" href="#银行家算法—分配资源的原则" aria-hidden="true">#</a></h3><ul><li>当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程。</li><li>进程可以分期请求资源，但请求的总数不能超过最大需求量。</li><li>当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间里得到资源。</li></ul><p><img src="'+x+'" alt="2.3_银行家算法例子"></p><h3 id="进程的互斥和同步" tabindex="-1">进程的互斥和同步 <a class="header-anchor" href="#进程的互斥和同步" aria-hidden="true">#</a></h3><p>....</p><h3 id="pv操作-用来解决互斥和同步的问题" tabindex="-1">PV操作-用来解决互斥和同步的问题 <a class="header-anchor" href="#pv操作-用来解决互斥和同步的问题" aria-hidden="true">#</a></h3><p>临界区：每个进程中访问临界资源的那段代码成为临界区</p><p>信号量：一种特殊的变量，计数器</p><p>PV操作：用来解决互斥和同步的问题。</p><p>PV操作是分开来看的：</p><p>​ P操作：使S=S-1，若S&gt;=0，则该进程继续执行，否则该进程排入等待队列</p><p>​ V操作：使S=S+1，若S&lt;=0，唤醒等待队列中的一个进程</p><h2 id="存储管理" tabindex="-1">存储管理 <a class="header-anchor" href="#存储管理" aria-hidden="true">#</a></h2><h3 id="页式存储" tabindex="-1">页式存储 <a class="header-anchor" href="#页式存储" aria-hidden="true">#</a></h3><p>分页存储管理的思想：把内存分为一个个相等的小分区，再按照分区大小把进程拆分成一个个小部分。</p><h3 id="页面置换算法" tabindex="-1">页面置换算法 <a class="header-anchor" href="#页面置换算法" aria-hidden="true">#</a></h3><ol><li>先进先出 FIFO</li><li>最佳置换法 OPT (理想算法)</li><li>最近最少使用置换法 LRU</li></ol><h2 id="文件管理—树形目录结构" tabindex="-1">文件管理—树形目录结构 <a class="header-anchor" href="#文件管理—树形目录结构" aria-hidden="true">#</a></h2><p>.....</p><h2 id="设备管理" tabindex="-1">设备管理 <a class="header-anchor" href="#设备管理" aria-hidden="true">#</a></h2><p>数据传输控制方式</p><ol><li>程序控制方式：CPU与外设间的数据传送是在程序的控制下完成的一种数据传送方式</li><li>程序中断方式：程序中断是指计算机执行现行程序的过程中，出现某些急需处理的异常情况和特殊请求，CPU暂时终止现行程序，而转去对随机发生的更紧迫的事件进行处理，在处理完毕后，CPU将自动返回原来的程序继续执行。</li><li>DMA方式：DMA是 I/O 设备与主存之间由硬件组成的直接数据通路，主要用于高速 I/O 设备与主存之间的成组数据传送。</li></ol>',32);function F(l,w,O,N,U,E){return r(),n("div",null,[s("h1",z,[a(i(l.$frontmatter.title)+" ",1),v]),k,R,A,S,C,I,T,D,B,P,V])}const W=t(y,[["render",F]]);export{$ as __pageData,W as default};
